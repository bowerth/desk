#######################################
## Shiny interface for data functions
#######################################
## data ui and tabs
## output$ui_stanindici4 <- renderUI({

data(stanDim)
data(STANNAi4)

xrates <- DATA.XRATES
names(xrates) <- sub("var", "cur", names(xrates))

namevar.btd <- unique(DATA.BTD$var)
namevar.stan <- unique(DATA.STAN$var)
namevar.anberd <- as.factor(unique(DATA.ANBERD$var))

## SQL.STAN <- odbcDriverConnect(connection = "SERVER=VS-GEN-SQL-3; DRIVER=SQL Server; DATABASE=STAN", readOnlyOptimize = TRUE)

ui.group <- list(
  "cou: by Country" = "cou",
  "ind: by Industry" = "ind"
  )

ui.indic <- list(
  "VSHT: Value added share relative to total economy" = "VSHT",
  ## "custom: Custom formula" = "custom",
  "VSHM: Value added shares relative to manufacturing" = "VSHM",
  "ESHT: Employment shares in total economy" = "ESHT",
  "ESHM: Employment shares in total manufacturing" = "ESHM",
  "LBNT: Labour compensation per workforce in total economy" = "LBNT",
  "LBNM: Labour compensation per workforce in manufacturing" = "LBNM",
  "LBET: Labour compensation per employee in total economy" = "LBET",
  "LBEM: Labour compensation per employee in manufacturing" = "LBEM",
  "LBVA: Labour share of value added in total economy" = "LBVA",
  "IPYE: Labour productivity index" = "IPYE",
  "IPYH: Labour productivity index" = "IPYH",
  "IULC: Unit labor cost index" = "IULC",
  "LULC: Unit labor cost level" = "LULC",
  "AVHW: Average hours worked" = "AVHW",
  "VAPR: Value added share of production" = "VAPR",
  "INPR: Intermediate consumption share of production" = "INPR",
  "INVV: Investment intensity based on value added" = "INVV",
  "INVT: Investment shares relative to total economy" = "INVT",
  "INVM: Investment shares relative to total manufacturing" = "INVM",
  "RDST: Distribution of R&D expenditures across all activities" = "RDST",
  "RDSM: Distribution of R&D expenditures across manufacturing activities" = "RDSM",
  "RDIV: R&D intensity using value added" = "RDIV",
  "RDIP: R&D intensity using production" = "RDIP",
  "CMTB: Contribution to manufacturing trade balance" = "CMTB",
  "EXIM: Export import ratio" = "EXIM",
  "TBAL: Trade balance - in US dollars: exchange rate as SP.EXCH" = "TBAL",
  "XSHT: Composition of total exports of goods" = "XSHT",
  "XSHM: Composition of manufacturing exports of goods" = "XSHM",
  "MSHT: Composition of total imports of goods" = "MSHT",
  "MSHM: Composition of manufacturing imports of goods" = "MSHM",
  "XSHP: Export share of production" = "XSHP",
  "MPEN: Import penetration" = "MPEN"
  )
## ui.indic2 <- c(list(None = ""), ui.indic)
## ui.var2 <- c(ui.var[2], list(None = ""), ui.var[-2]) # PROD as first

ui.sqltable <- list(
  "Rda DATA.STAN" = "STANRDA",
  "SQL STANPUBi4_PRE" = "STANPUBi4_PRE"
  )

formula.indic.init <- rbind.data.frame(
  c("VSHT", "VALU / VALU_DTOTAL"),
  c("VSHM", "VALU / VALU_D10T33"),
  c("ESHT", "EMPN / EMPN_DTOTAL"),
  c("ESHM", "EMPN / EMPN_D10T33"),
  c("LBNT", "LABR / LABR_DTOTAL"),
  c("LBNM", "LABR / LABR_D10T33"),
  c("LBET", "EMPE / EMPE_DTOTAL"),
  c("LBEM", "EMPE / EMPE_D10T33"),
  c("LBVA", "LABR / VALU"),
  c("IPYE", "VALK / EMPN / (VALK_2005 / EMPN_2005)"),
  c("IPYH", "VALK / HRSN / (VALK_2005 / HRSN_2005)"),
  c("IULC", "EMPN / EMPE * LABR / VALK / (EMPN_2005 / EMPE_2005 * LABR_2005 / VALK_2005)"),
  c("LULC", "EMPN / EMPE * LABR / VALK"),
  c("AVHW", "HRSN / EMPN"),
  c("VAPR", "VALU / PROD"),
  c("INPR", "INTI / PROD"),
  c("INVV", "GFCF / VALU"),
  c("INVT", "GFCF / GFCF_DTOTAL"),
  c("INVM", "GFCF / GFCF_D10T33"),
  c("RDST", "RDNC / RDNC_DTOTAL"),
  c("RDSM", "RDNC / RDNC_D10T33"),
  c("RDIV", "RDNC / VALU"),
  c("RDIP", "RDNC / PROD"),
  c("CMTB", "((EXPO - IMPO) - (EXPO_D10T33 - IMPO_D10T33) * (EXPO + IMPO) / (EXPO_D10T33 + IMPO_D10T33)) / (EXPO_D10T33 + IMPO_D10T33)"),
  c("EXIM", "EXPO / IMPO"),
  c("TBAL", "EXPO - IMPO"),
  c("XSHT", "EXPO / EXPO_DTOTAL"),
  c("XSHM", "EXPO / EXPO_D10T33"),
  c("MSHT", "IMPO / IMPO_DTOTAL"),
  c("MSHM", "IMPO / IMPO_D10T33"),
  c("XSHP", "EXPO / PROD"),
  c("MPEN", "IMPO / (PROD - EXPO + IMPO)"))
names(formula.indic.init) <- c("indic", "formula")

output$stanindic_ui_and_tabs <- renderUI({

  ## ## Password authentication

    doLogin()
    if (loginData$LoggedIn) {
        doLogout()

        ##   ## list(
        ##     ## includeCSS("www/style.css"),
        ##     ## ## includeMathJax("www/js/MathJax.js"),
        ##     ## tags$head(
        ##     ##   tags$script(src = "js/jquery-ui.custom.min.js"),
        ##     ##   tags$script(src = "js/busy.js"),
        ##     ##   ## tags$script(src = "js/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
        ##     ##   tags$script(src = 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML',
        ##     ##               type = 'text/javascript')
        ##     ##   ),

        sidebarLayout(
            sidebarPanel(
                ## wellPanel(
                uiOutput("uiDatasets"),
                    ## ),
                ## include "Manage" to prepare modules like "analysis_skeleton.R"
                conditionalPanel(condition = "input.datatabs == 'Manage'",
                                 uiOutput("ui_Manage")
                                 ),
                conditionalPanel(condition = "input.datatabs != 'Manage'",
                                 ## selectInput("sqltable", "Data:", ui.sqltable),
                                 selectInput("indic", "Indicator:", ui.indic),
                                 conditionalPanel(condition="input.datatabs=='scatter' | input.datatabs=='bubble' | input.active_indic2==true",
                                                  selectInput("indic2", "Indicator 2 (y-axis):", ui.indic, selected = "ESHT")
                                                  ),
                                 conditionalPanel(condition="input.datatabs=='bubble' | input.active_indic3==true",
                                                  selectInput("indic3", "Indicator 3 (size):", ui.indic, selected = "LBNT")
                                                  ),
                                 conditionalPanel(condition="input.datatabs=='bubble'",
                                                  selectInput("group", "Group by:", ui.group, selected = "cou")
                                                  ),
                                 conditionalPanel(condition="input.datatabs=='table'",
                                                  ## checkboxInput("cover", "Show data coverage", FALSE),
                                                  checkboxInput("showIndic", "Show indicator values", TRUE),
                                                  checkboxInput("showData", "Show source data values", FALSE),
                                                  selectInput("pivotRow", "ID variables and order of sorting",
                                                              as.list(c("var", "cou", "ind", "year")),
                                                              selected = c("var", "cou", "ind"), multiple = TRUE)
                                                  ),
                                 conditionalPanel(condition="input.datatabs=='download'",
                                                  checkboxInput("pivotDataDownload", "Show variables in columns", FALSE)
                                                  ),
                                 actionButton("recalcButton", "Recalculate with selection"),
                                 selectInput("namecou", "Country:", as.list(STAN.COU), selected = sample(STAN.COU, 15), multiple = TRUE),
                                 selectInput("nameind", "Industries:", c(list("A10"), as.list(STANi4.INDALL)), selected = "D10T33", multiple = TRUE),
                                 conditionalPanel(condition="input.datatabs=='table' | input.datatabs=='line' | input.datatabs=='download'",
                                                  sliderInput("nameyear",
                                                              "Years:",
                                                              value = c(1970,2012),
                                                              min = 1970,
                                                              max = 2012,
                                                              step = 1,
                                                              format="#")
                                                  ),
                                 conditionalPanel(condition="input.datatabs=='bar' | input.datatabs=='scatter' | input.datatabs=='bubble'",
                                                  selectInput("year", "Year:", as.list(c(2012:1970)), selected = 2011, multiple = FALSE)
                                                  ),
                                 selectInput("cur", "Currency:",
                                             list(
                                                 "Purchasing Power Parities" = "PPPS",
                                                 "Exchange Rate" = "EXCH",
                                                 "National Currency Units" = "NCU"
                                                 )
                                             ),
                                 numericInput("rounddec", "Round to number of decimals:", 4),
                                 conditionalPanel(condition="input.datatabs=='table' | input.datatabs=='download'",
                                                  helpText("Download comma-separated values:"),
                                                  downloadButton('downloadData', label= '')
                                                  )


                                 )
                ),
            mainPanel(id = "datatabs",
                      uiOutput("tabs_stanindic")
                      )
            ## ) # list(...
            )

    } else {
        sidebarLayout(
            sidebarPanel = NULL,
            mainPanel(
                navlistPanel(
                    "Disclaimer",
                    tabPanel("Enter Credentials", loginUI()) # mainPanel((h5("Login"), loginUI()))
                    ),
                width = 15
                )
            )
        ## fluidPage(
        ##     fluidRow(column(1, offset=5, h5("Login"), loginUI())),
        ##     header = tags$style(type="text/css", "well { width: 100%; }")
        ##     )
    }

})

output$tabs_stanindic <- renderUI({
  tabsetPanel(id = "datatabs",

              ## tabPanel("Manage", htmlOutput("htmlDataExample"), # tools/data/manage.R l.258
              tabPanel("Manage", verbatimTextOutput("htmlDataExample"), # tools/data/manage.R l.258
                       ## HTML('<label>10 (max) rows shown. See View-tab for details.</label>'),
                       ## checkboxInput("man_add_descr","Add/edit data description", FALSE)
                       conditionalPanel(condition = "input.man_add_descr == false",
                                        HTML(dataDescriptionOutput('html'))
                                        ),
                       conditionalPanel(condition = "input.man_add_descr == true",
                                        HTML("<label>Add data description:</label>"),
                                        tags$textarea(id="man_data_descr", rows="10", cols="12", dataDescriptionOutput('md'))
                                        )
                       ),

              tabPanel("Table: Data", tableOutput("table_data"), value="table"),
              tabPanel("Plot: Poly Bar", showOutput("rchartPolyBar", "polycharts"), value="bar"),
              tabPanel("Plot: NVD3 Bar", showOutput("rchartNVD3MultiBar", "nvd3"), value="bar"),
              tabPanel("Plot: NVD3 Scatter", showOutput("rchartNVD3Scatter", "nvd3"),  value="scatter"), # verbatimTextOutput("text_ace_console")
              tabPanel("Plot: High Bubble", showOutput("rchartHighBubble", "highcharts"), value="bubble"),
              tabPanel("Plot: Morris Line", showOutput("rchartMorrisLine", "morris"), value="line")
              )
})




## #########################
## custom input for testing
## #########################

    ## input <- list(
    ##     allcou=FALSE,
    ##     allind=FALSE,
    ##     altertoprec=FALSE,
    ##     code_calc="VALU / EMPE",
    ##     cover=FALSE,
    ##     cur="EXCH",
    ##     ## formula.ind="DTOTAL",
    ##     namecou=c("AUT","FIN","DNK"),
    ##     nameind=c("D29T30","D10T33"),
    ##     nameyear=c(1990,2006),
    ##     decim=0,
    ##     indic="EXIM",
    ##     indic2="MPEN",
    ##     recalcButton=0,
    ##     rounddec=2,
    ##     sqltable="STANRDA",
    ##     datatabs="bar",
    ##     toprec=1000,
    ##     year=2006
    ##     )

formula.indic <- reactive({

  ## if (input$evalButton == 0)
  ##   {
  ##     return(isolate({

  formula.indic <- formula.indic.init

  ##   }))
  ## } else {
  ##   return(isolate({

  ##     formula.indic <- rbind(formula.indic.init,
  ##                            data.frame(indic="custom", formula = input$code_calc))
  ##     ## class(formula.indic$indic)
  ##     ## class(formula.indic$formula)

  ##   }))
  ## }

})

namecou <- reactive({
  ## observe({
    if(is.null(input$recalcButton) || input$recalcButton == 0) # return()
      ## if (input$recalcButton == 0)
      {
        return(isolate({

          namecou <- input$namecou
          namecou

        }))
      } else {
        return(isolate({namecou <- input$namecou}))
      }
  ## })
})

nameindic <- reactive({

  nameindic <- input$indic
  if (input$datatabs%in%c("scatter", "bubble")) nameindic <- union(nameindic, input$indic2)
  if (input$datatabs%in%c("bubble")) nameindic <- union(nameindic, input$indic3)
  nameindic

})

namedim <- reactive({
  nameindic <- nameindic()
  formula.indic <- formula.indic()

  namedim <- NULL
  ## indic <- nameindic[1]
  for (indic in nameindic)
    {
      dim.indic <- gsub(pattern = "[^a-zA-Z0-9]", replacement = " ", formula.indic$formula[formula.indic$indic==indic])
      dim.indic <- gsub(pattern = "[ ]+", replacement = " ", dim.indic)
      dim.indic <- unlist(strsplit(dim.indic, split = " "))
      namedim <- union(namedim, dim.indic)
    }
  namedim

})

string.formula <- reactive({
  nameindic <- nameindic()
  formula.indic <- formula.indic()

  string.formula <- NULL
  ## indic <- nameindic[1]
  for (indic in nameindic)
    {
      formula <- formula.indic$formula[formula.indic$indic==indic]
      string.formula <- toString(paste(string.formula, formula))
    }
  string.formula

})

nameind <- reactive({

  if(is.null(input$recalcButton) || input$recalcButton == 0) # return()
  ## if (input$recalcButton == 0)
    {
      return(isolate({

        nameind <- input$nameind
        nameind

      }))
    } else {
      return(isolate({
        nameind <- input$nameind
        if ("A10"%in%nameind) nameind <- union(nameind[!nameind%in%"A10"], STANi4.INDA10)
        nameind
      }))
    }

})

namevar <- reactive({
  namedim <- namedim()

  namevar <- namedim[namedim%in%STAN.VARALL]
  namevar

})

nameyear <- reactive({

  if (input$datatabs=="bar" | input$datatabs=="scatter" | input$datatabs=="bubble")
    {
      nameyear <- input$year
    } else {
      nameyear <- c(input$nameyear[1]:input$nameyear[2])
    }
  nameyear

})

denom.year <- reactive({
  namedim <- namedim()

  denom.year <- suppressWarnings(as.numeric(namedim)[!is.na(as.numeric(namedim[nchar(namedim)==4]))])
  denom.year

})

denom.ind <- reactive({
  namedim <- namedim()

  denom.ind <- namedim[namedim%in%STANi4.INDALL]
  denom.ind

})

## namesqltable <- reactive({
##   namesqltable <- input$sqltable
##   namesqltable
## })

## add.where <- reactive({
##     add.where <- NULL
##     add.where
## })
##
## toprec <- reactive({
##     toprec <- character()
##     if (input$altertoprec==TRUE) toprec <- input$toprec
##     toprec
## })

data.sql <- reactive({
  ## namesqltable <- namesqltable()
  namecou <- namecou()
  namevar <- namevar()
  ## nameeuc <- nameeuc()
  nameind <- nameind()
  denom.ind <- denom.ind()
  nameyear <- nameyear()
  denom.year <- denom.year()
  ## add.where <- add.where()
  ## toprec <- toprec()

  ## if (namesqltable=="STANPUBi4_PRE")
  ##   {
  ##     data.sql <- queryData(
  ##       connection=SQL.STAN,
  ##       table=namesqltable,
  ##       namecou=namecou,
  ##       namevar=namevar,
  ##       ## nameeuc=nameeuc,
  ##       dim.ind="ind",
  ##       nameind=union(nameind, denom.ind),
  ##       nameyear=union(nameyear, denom.year),
  ##       isic=4,
  ##       add.where=NULL,
  ##       topn=character())
  ##   } else if (namesqltable=="STANRDA")
  ##     {

  ## dat <- values[[datasets]]
  ## dat <- isolate(values[["STANNAi4"]])
  dat <- values[["STANNAi4"]]

  data.sql <- NULL
  ## dataset <- "stan"
  for (dataset in c("stan", "btd", "anberd"))
  {
      ## namevar <- c("VALU", "EMPN")
      ## nameyear <- 2006
      ## namecou <- "DEU"
      ## denom.ind <- NULL
      ## nameind <- "D10T33"
      ## denom.year <- NULL
      eval(parse(text = paste0(
                 'if (length(intersect(namevar, namevar.', dataset, ')) > 0) {',
                 'data.temp <- dat$DATA.', toupper(dataset), '[dat$DATA.', toupper(dataset), '$cou%in%namecou & dat$DATA.', toupper(dataset), '$var%in%namevar & dat$DATA.', toupper(dataset), '$ind%in%union(nameind, denom.ind) & dat$DATA.', toupper(dataset), '$year%in%union(nameyear, denom.year),];',
                 'data.sql <- rbind(data.sql, data.temp)',
                 '}'
                 )))
  }

        ## data.temp <- dat[dat$cou%in%namecou &
        ##                  dat$var%in%namevar &
        ##                  dat$ind%in%union(nameind, denom.ind) &
        ##                  dat$year%in%union(nameyear, denom.year),]
        ## data.sql <- rbind(data.sql, data.temp)

        ## if (length(intersect(namevar, namevar.stan)) > 0)
        ##   {
        ##     data.temp <- DATA.STAN[DATA.STAN$cou%in%namecou &
        ##                            DATA.STAN$var%in%namevar &
        ##                            DATA.STAN$ind%in%union(nameind, denom.ind) &
        ##                            DATA.STAN$year%in%union(nameyear, denom.year),]
        ##     data.sql <- rbind(data.sql, data.temp)
        ##   }
        ## if (length(intersect(namevar, namevar.btd)) > 0)
        ##   {
        ##     data.temp <- DATA.BTD[DATA.BTD$cou%in%namecou &
        ##                           DATA.BTD$var%in%namevar &
        ##                           DATA.BTD$ind%in%union(nameind, denom.ind) &
        ##                           DATA.BTD$year%in%union(nameyear, denom.year),]
        ##     data.sql <- rbind(data.sql, data.temp)
        ##   }
        ## if (length(intersect(namevar, namevar.anberd)) > 0)
        ##   {
        ##     data.temp <- DATA.ANBERD[DATA.ANBERD$cou%in%namecou &
        ##                              DATA.ANBERD$var%in%namevar &
        ##                              DATA.ANBERD$ind%in%union(nameind, denom.ind) &
        ##                              DATA.ANBERD$year%in%union(nameyear, denom.year),]
        ##     data.sql <- rbind(data.sql, data.temp)
        ##   }

      ## }

  ## apply exchange USD rates
  if (input$cur!="NCU")
    {
      data.sql.mon <- data.sql[data.sql$var%in%STAN.VARMON,]
      data.sql.mon <- merge(data.sql.mon, xrates[xrates$cur==input$cur,], by = c("cou", "year"))
      data.sql.mon$value <- data.sql.mon$value.x / data.sql.mon$value.y
      data.sql.mon <- subset(data.sql.mon, select = c("cou", "var", "ind", "year", "value"))
      data.sql <- rbind(data.sql[!data.sql$var%in%STAN.VARMON,], data.sql.mon)
    }
  data.sql

})

data.calc <- reactive({
  data.sql <- data.sql()
  nameindic <- nameindic()
  nameind <- nameind()
  namevar <- namevar()
  nameyear <- nameyear()
  denom.ind <- denom.ind()
  denom.year <- denom.year()
  formula.indic <- formula.indic()

  denom <- list(denom.ind, denom.year)
  names(denom) <- c("ind", "year")
  ## dim <- "year"
  ## dim <- "ind"
  data.denom.all <- NULL
  for (dim in names(denom))
    {
      if (length(denom[[dim]]) > 0)
        {
          denom.member <- denom[[dim]]
          eval(parse(text = paste0('nom.member <- name', dim)))
          ## if (length(denom.ind) > 0)
          ## {
          ##     denom.dim <- "ind"
          ##     denom.member <- denom.ind
          ##     nom.member <- nameind
          ## } else if (length(denom.year) > 0)
          ## {
          ##     denom.dim <- "year"
          ##     denom.member <- denom.year
          ##     nom.member <- nameyear
          ## }
          data.denom <- data.sql[data.sql[,dim]%in%denom.member,]
          data.denom$var <- paste0(data.denom$var, "_", denom.member)
          data.denom <- merge(data.denom, nom.member, all = TRUE)
          data.denom[,dim] <- data.denom$y
          data.denom <- data.denom[,!colnames(data.denom)=="y"]
          if (length(denom.member) > 0) data.denom.all <- rbind(data.denom.all, data.denom)
        }
    }
  if (length(data.denom.all) > 0) data.sql <- rbind(data.sql, data.denom.all)
  ## merge(data.sql, data.sql[data.sql$year==formula.year,], by =  names(data.sql)[!names(data.sql) %in% c(dim.merge, "value")])
  ## eval(parse(text = paste0('merge(data.sql, data.sql[data.sql$', dim.merge, '==formula.', dim.merge, ',], by =  names(data.sql)[!names(data.sql) %in% c(dim.merge, "value")])')))
  data.calc <- dcast(data.sql, cou + ind + year ~ var, value.var = "value")
  attach(data.calc)
  for (indic in nameindic)
    {
      eval(parse(text = paste0('data.calc$', indic, ' <- ', formula.indic$formula[formula.indic$indic==indic])))
    }
  detach(data.calc)
  data.calc <- data.calc[,!sapply(strsplit(colnames(data.calc), "_"), "[[", 1)%in%namevar] # remove variables from data frame
  data.calc$ind <- factor(data.calc$ind, levels = STANi4.INDALL)
  ## for (indic in nameindic)
  ## {
  ##     eval(parse(text = paste0('data.calc <- data.calc[!is.na(data.calc[,"', indic, '"]),]')))
  ## }
  data.calc <- melt(data.calc, id.vars = c("cou", "ind", "year"), variable.name = "indic", na.rm = TRUE)
  data.calc <- transform(data.calc, value = round(value, input$rounddec))
  data.calc

})

data.cover <- reactive({
  data.calc <- data.calc()
  data.min <- aggregate(data.calc$year, by = list(data.calc$indic, data.calc$cou, data.calc$ind), FUN = "min")
  data.max <- aggregate(data.calc$year, by = list(data.calc$indic, data.calc$cou, data.calc$ind), FUN = "max")
  names <- c("indic", "cou", "ind", "period")
  names(data.min) <- names
  names(data.max) <- names
  data.cover <- merge(data.min, data.max, by = c("indic", "cou", "ind"))
  data.cover$period <- paste0(data.cover$period.x, "-", data.cover$period.y)
  data.cover$ind <- factor(data.cover$ind, levels = STANi4.INDALL)
  data.cover
})

## combine data and indicators for table output
data.table <- reactive({
  data.sql <- data.sql()
  data.calc <- data.calc()

  names(data.calc) <- sub("indic", "var", names(data.calc))
  data.calc <- subset(data.calc, select = names(data.sql))

  data.table <- NULL
  if (input$showData==TRUE) data.table <- rbind(data.table, data.sql)
  if (input$showIndic==TRUE) data.table <- rbind(data.table, data.calc)

  pivot.row <- input$pivotRow
  ## pivot.row <- c("cou", "var", "ind", "year")
  ## pivot.row <- c("cou", "var", "ind")
  ## pivot.row <- c("cou", "var")
  string.pivot.row <- gsub(",", " +", toString(pivot.row))
  pivot.col <- setdiff(names(data.table), c(pivot.row, "value"))
  string.pivot.col <- gsub(",", " +", toString(pivot.col))

  if (length(pivot.col) > 0)
    {
      eval(parse(text = paste0('data.table <- dcast(data.table, ', string.pivot.row, ' ~ ', string.pivot.col, ', value.var = "value")')))
      eval(parse(text = paste0('data.table <- data.table[order(', toString(paste0('data.table$', pivot.row)), '),]')))
    }

  data.table

})


## data.table.pivot <- reactive({
##     data.calc <- data.calc()
##     data.cover <- data.cover()
##     if (input$cover==FALSE) data.table.pivot <- dcast(data.calc, indic + cou + ind ~ year, value.var="value")
##     if (input$cover==TRUE) data.table.pivot <- dcast(data.cover, indic + ind ~ cou, value.var = "period")
##     ## data.table.pivot$ind <- factor(data.table.pivot$ind, levels = STANi4.INDALL)
##     ## data.table.pivot <- data.table.pivot[order(data.table.pivot$cou, data.table.pivot$ind),]
##     data.table.pivot
## })
##
## Tab: Table: Data
output$table_data <- renderTable({
  data.table()
  ## data.table.pivot()
})
##
## ## Tab: Table: Extracted values, wide format
## output$table_data_download <- renderTable({
##     data.sql <- data.sql()
##     if (input$pivotDataDownload==TRUE)
##     {
##         data.sql <- dcast(data.sql, cou + ind + year ~ var, value.var = "value")
##     }
##     data.sql
## })


## sort values for plotting
data.calc.indic <- reactive({
  data.calc <- data.calc()

  data.calc.indic <- dcast(data.calc, cou + ind + year ~ indic, value.var = "value")

  ## sort data according to largest industry in selection
  ind.top <- data.calc.indic$ind[order(-data.calc.indic[,input$indic])][1]
  data.calc.indic.ind.top <- data.calc.indic[data.calc.indic$ind==ind.top,]
  data.calc.indic$cou <- factor(data.calc.indic$cou, levels = unique(data.calc.indic.ind.top$cou[order(-data.calc.indic.ind.top[,input$indic])])) # added: 'unique' if more than one year
  data.calc.indic <- data.calc.indic[order(data.calc.indic$cou),]

  data.calc.indic

})

## output$text_ace_console <- renderPrint({
##     input$eval
##     data.calc.indic <- data.calc.indic()
##     data.sql <- data.sql()
##     namevar <- namevar()

##     return(isolate(eval(parse(text=input$code_console))))
## })

## Tab: Plot: Bubble
output$rchartHighBubble <- renderChart({
  data.calc.indic <- data.calc.indic()
  ## string.formula <- string.formula()

  ## h1 <- hPlot(Pulse ~ Height, data = survey, type = "bubble", title = "Zoom demo", subtitle = "bubble chart", size = "Age", group = "Exer")
  eval(parse(text = paste0('h1 <- hPlot(', input$indic2, ' ~ ', input$indic, ', group = "', input$group,'", size = "', input$indic3, '", data = data.calc.indic, type = "bubble")'))) # title = string.formula
  ## h1$chart(zoomType = "xy")
  ## h1$exporting(enabled = T)
  h1$addParams(height = 500,
               dom = "rchartHighBubble")
  return(h1)

})

## Tab: Plot: Bar
output$rchartPolyBar <- renderChart({
  data.calc.indic <- data.calc.indic()
  string.formula <-  string.formula()
  ## data.calc.plot <- data.calc[data.calc$year==2006,]

  p1 <- rPlot(x = list(var = "cou", sort = input$indic),
              y = input$indic,
              color = 'ind',
              data = data.calc.indic,
              type = 'bar')
  ## if(input$active_indic2==TRUE)
  ## {
  ##     p1$layer(x = "cou",
  ##              y = input$indic2,
  ##              color = "ind",
  ##              data = data.calc.indic,
  ##              type = 'point',
  ##              size = list(const = 3))
  ## }
  p1$addParams(height = 500,
               dom = "rchartPolyBar",
               title = string.formula)
  p1$guides(x = list(title = "", ticks = unique(data.calc.indic$cou)))
  ## p1$guides(y = list(title = "", max = 18))
  ## p1

  return(p1)
})

output$rchartNVD3MultiBar <- renderChart({
  data.calc.indic <- data.calc.indic()

  eval(parse(text = paste0('n1 <- nPlot(', input$indic, ' ~ cou, group = "ind", data = data.calc.indic, type = "multiBarChart")')))
  n1$chart(reduceXTicks = FALSE)
  n1$xAxis(ticks = levels(data.calc.indic$cou)) # , tickFormat = "#!function(x) { return (x).toFixed(0) }!#")
  eval(parse(text = paste0('n1$yAxis(tickFormat = "#!function(x) { return (x).toFixed(', as.numeric(input$rounddec),') }!#")')))
  n1$addParams(height = 500,
               dom = "rchartNVD3MultiBar")
  ## n1$print("chart3")
  ## n1
  return(n1)

})

output$rchartNVD3Scatter <- renderChart({
  data.calc.indic <- data.calc.indic()

  ## s1 <- nPlot(mpg ~ wt, group = 'cyl', data = mtcars, type = 'scatterChart')
  eval(parse(text = paste0('s1 <- nPlot(', input$indic2, ' ~ ', input$indic, ', group = "cou", data = data.calc.indic, type = "scatterChart")')))
  s1$xAxis(axisLabel = input$indic)
  s1$yAxis(axisLabel = input$indic2)
  s1$addParams(height = 500,
               dom = "rchartNVD3Scatter")
  return(s1)

})

output$rchartMorrisLine <- renderChart({
  data.calc.indic <- data.calc.indic()
  namecou <- namecou()

  ## data(economics, package = "ggplot2")
  ## econ <- transform(economics, date = as.character(date))
  ## m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)

  ## data.calc$value <- round(data.calc$value, 2)
  ## data.calc <- transform(data.calc, year = as.character(year))

  eval(parse(text = paste0('data.calc.morris <- transform(data.calc.indic, year = as.character(year), ', input$indic, ' = round(', input$indic, ', input$rounddec))')))
  data.calc.morris.d <- dcast(data.calc.morris, year ~ cou + ind, value.var = input$indic)
  m1 <- mPlot(x = "year", y = names(data.calc.morris.d)[names(data.calc.morris.d)!="year"], type = "Line", data = data.calc.morris.d)

  m1$set(pointSize = 0, lineWidth = 1)
  m1$addParams(height = 500,
               dom = "rchartMorrisLine")

  ## m1$print("chart2")
  ## print(m1) # opens new tab
  return(m1)
  ## m1
})

output$downloadData <- downloadHandler(
  filename = function() { paste0(gsub(", ", "_", toString(input$indic)), '.csv')},
  content = function(file) {
    data.table <- data.table()
    data.out <- data.table
    write.csv(data.out, file, row.names = FALSE, na = "")
    ## if (input$datatabs=="table")
    ##   {
    ##     data.table.pivot <- data.table.pivot()
    ##     data.out <- data.table.pivot
    ##     write.csv(data.out, file, row.names = FALSE, na = "")
    ##   }
    ## if (input$datatabs=="download")
    ##   {
    ##     data.sql <- data.sql()
    ##     data.out <- data.sql
    ##     if (input$pivotDataDownload==TRUE) data.out <- dcast(data.out, cou + ind + year ~ var, value.var = "value")
    ##     write.csv(data.out, file, row.names = FALSE, na = "")
    ##   }
  }
  )
